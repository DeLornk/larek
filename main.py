import streamlit as st
import pandas as pd

def get_recommendations(n=10, m=7):
    """
    –ë–µ—Ä—ë–º —Ç–æ–ø-`n` —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –º–æ–¥–µ–ª–∏, –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –Ω–∏—Ö –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ
    –≤ –ø—Ä–æ–¥–∞–∂–µ –∑–∞ –ø—Ä–æ—à–ª—ã–µ `m` –¥–Ω–µ–π
    """
    hybrid_recommendations = pd.read_csv('../data/results/hybrid_recommendations.csv')
    hybrid_recommendations = hybrid_recommendations[(hybrid_recommendations['client_id'].isin(df['client_id'])) &
                                                    (hybrid_recommendations['rank_ctb'] <= n)].reset_index(drop=True)
    hybrid_recommendations['product_id'] = hybrid_recommendations['product_id'].astype(int)

    recommendations = hybrid_recommendations.astype(str).groupby('product_id').agg(lambda x: ','.join(x.unique()))['client_id'].to_frame()
    recommendations['count'] = hybrid_recommendations.astype(str).groupby('product_id')['client_id'].count()
    recommendations.index = recommendations.index.astype(int, copy=False)

    products_last_week = df[df['transaction_datetime'] > (max(df['transaction_datetime']) - pd.Timedelta(m, 'd'))]['product_id']

    recom_id = set(recommendations.index)
    last_id = set(products_last_week)

    return recommendations.loc[list(recom_id.difference(last_id))]


# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
st.set_page_config(layout="wide")

# –°–æ–∑–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
st.title("–õ–∞—Ä—ë–∫")
col1, col2 = st.columns([2, 1], gap="large")
col1.subheader("–ü—Ä–æ–≥–Ω–æ–∑")

col3, col4 = st.columns([2, 1], gap="large")
col3.subheader("–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
col4.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

# –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
df = pd.read_csv('../data/results/df_retail.csv')[['transaction_datetime', 'client_id', 'product_quantity', 'transaction_id', 'product_id']]
df_timeseries_preds = pd.read_csv('../data/results/df_timeseries_preds.csv', index_col='transaction_datetime')
df_historycal_data = pd.read_csv('../data/results/historycal_data.csv', index_col='transaction_datetime')

df['transaction_datetime'] = pd.to_datetime(df['transaction_datetime'])
df = df.sort_values(by='transaction_datetime')
df.reset_index(drop=True, inplace=True)

lists_of_products = df['product_id'].unique()
lists_of_users = df['client_id'].unique()

# –°–æ–∑–¥–∞—ë–º sidebar
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

product_for_prediction = st.sidebar.selectbox("–ü—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", options=lists_of_products)

products_choosen = st.sidebar.multiselect("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º", 
                                          options=lists_of_products)

# –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥–Ω–æ–∑
if product_for_prediction:
    history = df_historycal_data[df_historycal_data.product_id == product_for_prediction]['y'].to_frame(name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ')
    preds = df_timeseries_preds[df_timeseries_preds.product_id == product_for_prediction]['y'].to_frame(name='–ü—Ä–æ–≥–Ω–æ–∑')
    col1.line_chart(history.join(preds[:7], how='outer'))
else:
    col1.warning("–î–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", icon='üîé')


col2.metric("–°–ø—Ä–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ", preds[:7].sum())

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
rec = get_recommendations()
col4.dataframe(rec)

# –≤—ã–≤–µ–¥–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
if products_choosen:
    col3.dataframe(df[df['product_id'].isin(products_choosen)])
else:
    col3.dataframe(df)